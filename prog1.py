{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Current Data Structures:\n",
      "List: [3, 1, 4, 1, 5]\n",
      "Tuple: (9, 2, 6, 5, 3)\n",
      "Set: {1, 2, 3, 7, 8}\n",
      "Dictionary: {'a': 10, 'b': 20, 'c': 30}\n",
      "\n",
      "Main Menu:\n",
      "1. List Operations\n",
      "2. Set Operations\n",
      "3. Dictionary Operations\n",
      "4. Tuple Operations\n",
      "5. Exit\n",
      "Enter choice: 1\n",
      "\n",
      "List Operations:\n",
      "1. Insert\n",
      "2. Update\n",
      "3. Delete\n",
      "4. Sort\n",
      "5. Search\n",
      "6. Back\n",
      "Enter choice: 1\n",
      "Enter value to insert: 29\n",
      "Enter position (index): 3\n",
      "Updated List: [3, 1, 4, 29, 1, 5]\n",
      "\n",
      "List Operations:\n",
      "1. Insert\n",
      "2. Update\n",
      "3. Delete\n",
      "4. Sort\n",
      "5. Search\n",
      "6. Back\n",
      "Enter choice: 6\n",
      "\n",
      "Current Data Structures:\n",
      "List: [3, 1, 4, 29, 1, 5]\n",
      "Tuple: (9, 2, 6, 5, 3)\n",
      "Set: {1, 2, 3, 7, 8}\n",
      "Dictionary: {'a': 10, 'b': 20, 'c': 30}\n",
      "\n",
      "Main Menu:\n",
      "1. List Operations\n",
      "2. Set Operations\n",
      "3. Dictionary Operations\n",
      "4. Tuple Operations\n",
      "5. Exit\n",
      "Enter choice: 4\n",
      "\n",
      "Tuple Operations:\n",
      "1. Search\n",
      "2. Back\n",
      "Enter choice: 1\n",
      "Enter value to search: 9\n",
      "Not found!\n",
      "\n",
      "Tuple Operations:\n",
      "1. Search\n",
      "2. Back\n"
     ]
    }
   ],
   "source": [
    "alist = [3, 1, 4, 1, 5]\n",
    "btuple = (9, 2, 6, 5, 3)\n",
    "cset = {7, 2, 8, 3, 1}\n",
    "ddict = {'a': 10, 'b': 20, 'c': 30}\n",
    "\n",
    "def display():\n",
    "    print(\"\\nCurrent Data Structures:\")\n",
    "    print(f\"List: {alist}\")\n",
    "    print(f\"Tuple: {btuple}\")\n",
    "    print(f\"Set: {cset}\")\n",
    "    print(f\"Dictionary: {ddict}\")\n",
    "\n",
    "def lists():\n",
    "    while True:\n",
    "        print(\"\\nList Operations:\")\n",
    "        print(\"1. Insert\")\n",
    "        print(\"2. Update\")\n",
    "        print(\"3. Delete\")\n",
    "        print(\"4. Sort\")\n",
    "        print(\"5. Search\")\n",
    "        print(\"6. Back\")\n",
    "        choice = int(input(\"Enter choice: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "            val = int(input(\"Enter value to insert: \"))\n",
    "            pos = int(input(\"Enter position (index): \"))\n",
    "            alist.insert(pos, val)\n",
    "            print(f\"Updated List: {alist}\")\n",
    "        elif choice == 2:\n",
    "            pos = int(input(\"Enter position (index) to update: \"))\n",
    "            val = int(input(\"Enter new value: \"))\n",
    "            if 0 <= pos < len(alist):  # Added bounds checking\n",
    "                alist[pos] = val\n",
    "                print(f\"Updated List: {alist}\")\n",
    "            else:\n",
    "                print(\"Invalid index!\")\n",
    "        elif choice == 3:\n",
    "            val = int(input(\"Enter value to delete: \"))\n",
    "            if val in alist:\n",
    "                alist.remove(val)\n",
    "                print(f\"Updated List: {alist}\")\n",
    "            else:\n",
    "                print(\"Value not found!\")\n",
    "        elif choice == 4:\n",
    "            alist.sort()\n",
    "            print(f\"Sorted List: {alist}\")\n",
    "        elif choice == 5:\n",
    "            val = int(input(\"Enter value to search: \"))\n",
    "            if val in alist:\n",
    "                print(f\"Found at index: {alist.index(val)}\")\n",
    "            else:\n",
    "                print(\"Not found!\")\n",
    "        elif choice == 6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice!\")\n",
    "\n",
    "\n",
    "def sets():\n",
    "    while True:\n",
    "        print(\"\\nSet Operations:\")\n",
    "        print(\"1. Add\")\n",
    "        print(\"2. Remove\")\n",
    "        print(\"3. Search\")\n",
    "        print(\"4. Back\")\n",
    "        choice = int(input(\"Enter choice: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "            val = int(input(\"Enter value to add: \"))\n",
    "            cset.add(val)\n",
    "            print(f\"Updated Set: {cset}\")\n",
    "        elif choice == 2:\n",
    "            val = int(input(\"Enter value to remove: \"))\n",
    "            if val in cset:  # Corrected variable name to cset\n",
    "                cset.remove(val)\n",
    "                print(f\"Updated Set: {cset}\")\n",
    "            else:\n",
    "                print(\"Value not found!\")\n",
    "        elif choice == 3:\n",
    "            val = int(input(\"Enter value to search: \"))\n",
    "            print(\"Found!\" if val in cset else \"Not found!\")\n",
    "        elif choice == 4:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice!\")\n",
    "\n",
    "def tuples():\n",
    "    while True:\n",
    "        print(\"\\nTuple Operations:\")  # Corrected menu title\n",
    "        print(\"1. Search\")  # Tuples are immutable, so only search is relevant for modification-like operations\n",
    "        print(\"2. Back\")\n",
    "        choice = int(input(\"Enter choice: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "            val = input(\"Enter value to search: \") # Tuples can contain various data types\n",
    "            if val in btuple:\n",
    "                print(f\"Found at index: {btuple.index(val)}\")\n",
    "            else:\n",
    "                print(\"Not found!\")\n",
    "        elif choice == 2:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice!\")\n",
    "\n",
    "def dicts():\n",
    "    while True:\n",
    "        print(\"\\nDictionary Operations:\")\n",
    "        print(\"1. Add/Update\")\n",
    "        print(\"2. Delete\")\n",
    "        print(\"3. Search\")\n",
    "        print(\"4. Back\")\n",
    "        choice = int(input(\"Enter choice: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "            key = input(\"Enter key: \")\n",
    "            val = int(input(\"Enter value: \"))\n",
    "            ddict[key] = val  # Corrected variable name to ddict\n",
    "            print(f\"Updated Dict: {ddict}\")\n",
    "        elif choice == 2:\n",
    "            key = input(\"Enter key to delete: \")\n",
    "            if key in ddict:\n",
    "                del ddict[key]\n",
    "                print(f\"Updated Dict: {ddict}\")\n",
    "            else:\n",
    "                print(\"Key not found!\")\n",
    "        elif choice == 3:\n",
    "            key = input(\"Enter key to search: \")\n",
    "            print(f\"Value: {ddict.get(key, 'Not found!')}\")\n",
    "        elif choice == 4:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice!\")\n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        display()\n",
    "        print(\"\\nMain Menu:\")\n",
    "        print(\"1. List Operations\")\n",
    "        print(\"2. Set Operations\")\n",
    "        print(\"3. Dictionary Operations\")\n",
    "        print(\"4. Tuple Operations\") # Corrected menu item\n",
    "        print(\"5. Exit\")\n",
    "        choice = int(input(\"Enter choice: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "            lists()\n",
    "        elif choice == 2:\n",
    "            sets()\n",
    "        elif choice == 3:\n",
    "            dicts() # Corrected function call\n",
    "        elif choice == 4:\n",
    "            tuples() # Corrected function call\n",
    "        elif choice == 5:\n",
    "            print(\"Exiting...\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
